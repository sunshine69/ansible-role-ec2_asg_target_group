- name: find ASGs
  ec2_asg_facts:
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    tags:
      Application: "{{ role_type }}"
      Environment: "{{ env }}"
  register: ec2_asg_facts

- name: find the target TGs
  elb_target_group_facts:
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    names: "{{ target_target_groups }}"
  register: target_group_facts
  when: target_target_groups

- name: set target_group_arn_list when target groups is non-empty
  set_fact:
    target_group_arn_list: "{{ target_group_facts | json_query('target_groups[].target_group_arn') }}"
  when: target_target_groups

- name: set target_group_arn_list when no target groups
  set_fact:
    target_group_arn_list: []
  when: not target_target_groups

- debug:
    var: ec2_asg_facts
    verbosity: 2

- debug:
    var: item
  with_items: "{{ ec2_asg_facts.results }}"
  when: "item.target_group_arns|length > 0 and source_target_group in item.target_group_names"

- name: set ASG target groups
  ec2_asg:
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    name: "{{ item.auto_scaling_group_name }}"
    health_check_period: "{{ item.health_check_grace_period }}"
    min_size: "{{ item.min_size }}"
    max_size: "{{ item.max_size }}"
    desired_capacity: "{{ item.desired_capacity }}"
    target_group_arns: "{{ target_group_arn_list }}"
    wait_timeout: "{{ ec2_asg_wait_timeout }}"
  with_items: "{{ ec2_asg_facts.results }}"
  when: "item.target_group_arns|length > 0 and source_target_group in item.target_group_names"
